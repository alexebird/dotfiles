B1;3409;0cclass CpuMetric < Metric
  def cpu_info
    # TIL /proc/stat is an accumulator - it counts all stats since boot
    # this means that we have to calculate a delta to get useful info
    terminal = File.read('/proc/stat').split(/\n/).first.split(' ')
    terminal.shift # get rid of 'cpu'

    initial = @@__CPU_METRIC_DATA rescue terminal

    # pairwise diff to get deltas
    deltas = terminal.zip(initial).map{|t,i| t.to_f - i.to_f }

    # store for next go-round
    @@__CPU_METRIC_DATA = terminal

    # sum up all parts to get a total so we can apply percentage to each
    total = deltas.reduce(:+)

    fields = %w[ user nice system idle iowait irq softirq steal guest guest_nice ]
    # if total is zero we can't divide by it, so short-circuit
    if total == 0
      Hash[fields.zip([0] * fields.size)]
    else
      Hash[fields.zip(deltas.collect {|x| (x / total * 100).round(2) })]
    end
  end
end

class CpuUserCheck < CpuMetric
  def check_name
    'cpu-user-check'
  end

  def value
    info = cpu_info
    return info['user']
  end
end

class CpuIdleCheck < CpuMetric
  def check_name
    'cpu-idle-check'
  end

  def value
    info = cpu_info
    return info['idle']
  end
end

class CpuIowaitCheck < CpuMetric
  def check_name
    'cpu-iowait-check'
  end

  def value
    info = cpu_info
    return info['iowait']
  end
end

class CpuStealCheck < CpuMetric
  def check_name
    'cpu-steal-check'
  end

  def value
    info = cpu_info
    return info['steal']
  end
end
